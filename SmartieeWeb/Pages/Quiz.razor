@page "/quiz/{CategoryIdAsString}/{Difficulty}/{IsTimed:bool}"
@inject QuizService QuizService
@inject NavigationManager NavigationManager
@inject ILogger<Quiz> Logger

@if (currentQuestion == null)
{
    <p>Loading questions...</p>
}
else if (timeExpired)
{
    <p>Time's up! Your final score: @QuizService.Score</p>
    <button @onclick="ShowResults">See Results</button>
}
else
{
    <h3>@currentQuestion.QuestionText</h3>
    @if (IsTimed)
    {
        <p>Time left: @timeLeft.ToString(@"mm\:ss")</p>
    }
    <ul>
    @foreach (var option in currentQuestion.Options.Select((value, index) => new { value, index }))
        {
            <li>
                <button @onclick="() => ConfirmAnswer(option.index)" class="@(GetOptionClass(option.index))"
                    disabled="@answerConfirmed">
                    @option.value
                </button>
            </li>
        }
    </ul>
}


@if (lastAnswerCorrect.HasValue)
{
    if (lastAnswerCorrect.Value)
    {
        <p>Correct!</p>
    }
    else
    {
        <p>Incorrect! The correct answer is: @currentQuestion.Options[currentQuestion.CorrectAnswerIndex]</p>
    }
    <p>@lastAnswerExplanation</p>
    <button class="custom-btn" @onclick="ProceedToNextQuestion">Next Question</button>
}

<ConfirmModal @ref="confirmModal" OnConfirm="OnConfirm" OnCancel="OnCancelConfirm" />


@code {
    /// <summary>
    /// The Category ID as a string. It's converted to an integer for internal processing.
    /// </summary>
    [Parameter] public string CategoryIdAsString { get; set; }
    public int CategoryId { get; set; }

    /// <summary>
    /// The difficulty level selected for the quiz.
    /// </summary>
    [Parameter] public string Difficulty { get; set; }

    /// <summary>
    /// Indicates whether the quiz should be timed.
    /// </summary>
    [Parameter] public bool IsTimed { get; set; }

    private Question currentQuestion;
    private int currentQuestionIndex;
    private ConfirmModal confirmModal;
    private System.Threading.Timer quizTimer;
    private TimeSpan timeLeft;
    private bool timeExpired;
    private string prevCategoryIdAsString;
    private string prevDifficulty;
    private bool? lastAnswerCorrect;
    private string lastAnswerExplanation;
    private int categoryId;
    private bool answerConfirmed = false;
    private int? selectedOptionIndex = null;
    private bool? isSelectionCorrect = null;


    // Initializes quiz state on component initialization.
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        QuizService.StartQuizTimer();
    }

    // Starts the quiz timer based on the category ID.
    private void StartTimer()
    {
        if (categoryId == 0)
        {
            timeLeft = TimeSpan.FromMinutes(10);
        }
        else
        {
            timeLeft = TimeSpan.FromMinutes(5);
        }

        if (quizTimer != null)
        {
            quizTimer.Change(Timeout.Infinite, 0);
            quizTimer.Dispose();
        }

        quizTimer = new System.Threading.Timer(_ =>
        {
            if (timeLeft <= TimeSpan.Zero)
            {
                timeExpired = true;
                QuizService.MarkTimeAsRanOut();

                quizTimer?.Change(Timeout.Infinite, 0);
                quizTimer?.Dispose();

                InvokeAsync(() =>
    {
        StateHasChanged();
        NavigationManager.NavigateTo($"/results/{QuizService.Score}");
    });
            }
            else
            {
                timeLeft = timeLeft.Add(TimeSpan.FromSeconds(-1));
                InvokeAsync(StateHasChanged);
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    // Retrieves and displays the next question in the quiz.
    private void GetNextQuestion()
    {
        if (QuizService.HasMoreQuestions(currentQuestionIndex))
        {
            currentQuestion = QuizService.GetQuestion(currentQuestionIndex);

            if (currentQuestion != null)
            {
                Logger.LogInformation("Displaying question {QuestionIndex}: {QuestionText}", currentQuestionIndex + 1,
                currentQuestion.QuestionText);
                for (int i = 0; i < currentQuestion.Options.Length; i++)
                {
                    Logger.LogInformation("Option {OptionIndex}: {OptionText}", i, currentQuestion.Options[i]);
                }
            }
            else
            {
                Logger.LogError("Expected to find a question at index {QuestionIndex} but found null.", currentQuestionIndex);
            }
        }
        else
        {
            Logger.LogInformation("No more questions, showing results.");
            ShowResults();
        }
    }

    // Confirms the user's selected answer and processes it.
    private async Task OnConfirm(int optionIndex)
    {
        selectedOptionIndex = optionIndex;
        isSelectionCorrect = currentQuestion.CorrectAnswerIndex == optionIndex;
        await SubmitAnswer(optionIndex);
        StateHasChanged();
    }

    // Prompts the user to confirm their selected answer.
    private void ConfirmAnswer(int optionIndex)
    {
        if (answerConfirmed)
        {
            return;
        }

        Logger.LogInformation($"ConfirmAnswer called with index: {optionIndex}");

        if (currentQuestion == null)
        {
            Logger.LogError("Attempt to confirm answer when currentQuestion is null.");
            return;
        }

        if (optionIndex < 0 || optionIndex >= currentQuestion.Options.Length)
        {
            Logger.LogError("Option index {OptionIndex} is out of range for current question.", optionIndex);
            return;
        }

        answerConfirmed = true;
        confirmModal.Show($"Do you confirm this is your final answer: {currentQuestion.Options[optionIndex]}?", optionIndex);
    }

    // Submits the user's answer and updates the quiz state.
    private async Task SubmitAnswer(int optionIndex)
    {
        if (timeExpired) return;

        var isCorrect = QuizService.SubmitAnswer(currentQuestionIndex, optionIndex);
        lastAnswerCorrect = isCorrect;
        lastAnswerExplanation = currentQuestion.Explanation;

        Logger.LogInformation($"Answer submitted for question {currentQuestionIndex + 1}: {isCorrect}");
    }

    // Navigates to the results page at the end of the quiz.
    private void ShowResults()
    {
        QuizService.EndQuizTimer();
        NavigationManager.NavigateTo($"/results/{QuizService.Score}");
    }

    /// <summary>
    ///  Cleans up resources on component disposal.
    /// </summary>
    public void Dispose()
    {
        quizTimer?.Change(Timeout.Infinite, 0);
        quizTimer?.Dispose();
    }

    // Handles parameter updates and initializes or updates the quiz accordingly.
    protected override async Task OnParametersSetAsync()
    {
        if (!int.TryParse(CategoryIdAsString, out categoryId))
        {
            Logger.LogError("Invalid CategoryId passed to Quiz component.");
            return;
        }

        CategoryId = categoryId;

        await QuizService.LoadQuestionsAsync(categoryId, Difficulty, IsTimed);

        if (QuizService.TotalQuestions == 0)
        {
            Logger.LogWarning("No questions loaded, redirecting to categories.");
            NavigationManager.NavigateTo("/categories");
        }
        else
        {
            if (IsTimed)
            {
                StartTimer();
            }
            currentQuestionIndex = 0;
            GetNextQuestion();
        }
    }

    // Initializes the quiz by loading questions based on the selected category and difficulty.
    private async Task InitializeQuiz()
    {
        await QuizService.LoadQuestionsAsync(CategoryId, Difficulty, IsTimed);
        if (QuizService.TotalQuestions == 0)
        {
            Logger.LogWarning("No questions loaded, redirecting to categories.");
            NavigationManager.NavigateTo("/categories");
            return;
        }

        if (IsTimed)
        {
            timeLeft = TimeSpan.FromMinutes(5);
            StartTimer();
        }

        currentQuestionIndex = 0;
        GetNextQuestion();
    }

    // Proceeds to the next question or ends the quiz if no more questions are left.
    private void ProceedToNextQuestion()
    {
        currentQuestionIndex++;
        GetNextQuestion();
        lastAnswerCorrect = null;
        answerConfirmed = false;
        selectedOptionIndex = null;
        isSelectionCorrect = null;
    }

    // Cancels the confirmation of an answer.
    private void OnCancelConfirm()
    {
        answerConfirmed = false;
        StateHasChanged();
    }

    // Determines the CSS class for question options based on the correctness of the user's selection.
    private string GetOptionClass(int optionIndex)
    {
        if (selectedOptionIndex.HasValue && selectedOptionIndex.Value == optionIndex)
        {
            return isSelectionCorrect.Value ? "option-correct" : "option-incorrect";
        }
        if (isSelectionCorrect.HasValue && !isSelectionCorrect.Value && currentQuestion.CorrectAnswerIndex == optionIndex)
        {
            return "option-correct";
        }
        return "";
    }
}
